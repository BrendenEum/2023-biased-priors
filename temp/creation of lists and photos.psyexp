<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'Circle_Num': '175', 'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="default" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="List" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="ISI">
      <TextComponent name="ISI_text_before_response">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ISI_text_before_response" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/*&amp;#10;this routine doesnot work couse i wanted it to  not have a fixation&amp;#10;but the var must be coded couse it wont work othewise*/&amp;#10;var Base_Circle_Pos;&amp;#10;Base_Circle_Pos = ((random() * 0.5) - 0.25);&amp;#10;ISI_text_before_response.setPos([Base_Circle_Pos, 0]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# the background Circle and ISI position - for randomization&amp;#10;# we use it here becouse we want the fixation pos will be sync with the Trial circle&amp;#10;&amp;#10;'''&amp;#10;this routine doesnot work couse i wanted it to  not have a fixation&amp;#10;but the var must be coded couse it wont work othewise&amp;#10;'''&amp;#10;Base_Circle_Pos = random()*0.5-0.25&amp;#10;ISI_text_before_response.setPos((Base_Circle_Pos, 0))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ISI_2">
      <TextComponent name="Test_ISI_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="1.5" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Test_ISI_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="random()+1" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="StimOver = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="StimOver = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Stim1">
      <PolygonComponent name="Background_Circle_Stim_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="100" valType="int" updates="constant" name="nVertices"/>
        <Param val="Background_Circle_Stim_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.9, 0.9)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="Stim1_Pic_List = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="Stim1_Pic_List = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="circle_Stim_1_list = [];&amp;#10;circle_Stim_1_list_Size = [];&amp;#10;circle_Stim_1_list_Pos = [];&amp;#10;nStim1 = randint(5, 11);&amp;#10;while ((circle_Stim_1_list.length &lt; nStim1)) {&amp;#10;    sizerand = ((random() * 0.1) + 0.05);&amp;#10;    pos_randX = ((random() * 0.9) - 0.45);&amp;#10;    pos_randY = ((random() * 0.9) - 0.45);&amp;#10;    polygon = new visual.Polygon({&quot;win&quot;: win, &quot;name&quot;: &quot;polygon&quot;, &quot;edges&quot;: 100, &quot;size&quot;: sizerand, &quot;ori&quot;: 0.0, &quot;pos&quot;: [pos_randX, pos_randY], &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;black&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 1.0), &quot;interpolate&quot;: true});&amp;#10;    overlap = false;&amp;#10;    for (var circle, _pj_c = 0, _pj_a = circle_Stim_1_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        circle = _pj_a[_pj_c];&amp;#10;        if (circle.overlaps(polygon)) {&amp;#10;            overlap = true;&amp;#10;        }&amp;#10;    }&amp;#10;    isInside = insideCircle(Background_Circle_Stim_1, polygon);&amp;#10;    if (((! overlap) &amp;&amp; isInside)) {&amp;#10;        circle_Stim_1_list.append(polygon);&amp;#10;        circle_Stim_1_list_Size.append(polygon.size[0]);&amp;#10;        circle_Stim_1_list_Pos.append(polygon.pos);&amp;#10;    }&amp;#10;}&amp;#10;if ((circle_Stim_1_list.length === nStim1)) {&amp;#10;    for (var circle, _pj_c = 0, _pj_a = circle_Stim_1_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        circle = _pj_a[_pj_c];&amp;#10;        circle.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Creating a lists for the stim1 circles&amp;#10;circle_Stim_1_list = []&amp;#10;circle_Stim_1_list_Size = []&amp;#10;circle_Stim_1_list_Pos = []&amp;#10;&amp;#10;#create a random number of between 5 to 11 circles in one round&amp;#10;nStim1 = randint(5, 11)&amp;#10;&amp;#10;# as long as the circle list is not full with 'nStim1' circles it append circles&amp;#10;while len(circle_Stim_1_list) &lt; nStim1:&amp;#10;    #sizerand is a random number for the size of the circle&amp;#10;    sizerand = random()*0.1+0.05&amp;#10;    #pos_rand(X, Y) is a random number for the postion of the circle&amp;#10;    pos_randX = random()*0.9-0.45&amp;#10;    pos_randY = random()*0.9-0.45&amp;#10;    polygon = visual.Polygon(&amp;#10;              win=win, name='polygon',&amp;#10;              edges=100, size=(sizerand),&amp;#10;              ori=0.0, pos=(pos_randX, pos_randY),&amp;#10;              lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='black',&amp;#10;              opacity=None, depth=-1.0, interpolate=True)&amp;#10;    # the overlaps method for all circles not overlap each other&amp;#10;    overlap = False&amp;#10;    for circle in circle_Stim_1_list:&amp;#10;        if circle.overlaps(polygon):&amp;#10;           overlap = True &amp;#10;    # the is inside method for all circles get inside the background circle&amp;#10;    isInside = insideCircle(Background_Circle_Stim_1, polygon)&amp;#10;    if not overlap and isInside:&amp;#10;       # append data for analsys and operations&amp;#10;       circle_Stim_1_list.append(polygon)&amp;#10;       circle_Stim_1_list_Size.append(polygon.size[0])&amp;#10;       circle_Stim_1_list_Pos.append(polygon.pos)&amp;#10;&amp;#10;# make the circles in 'circle_Stim_1_list' show up once just if the list is full with 'nStim1' circles&amp;#10;if len(circle_Stim_1_list) == nStim1:&amp;#10;    for circle in circle_Stim_1_list:&amp;#10;        circle.setAutoDraw(True)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#at the end of the routine make the circles in 'circle_Stim_1_list' disapeare&amp;#10;for circle in circle_Stim_1_list:&amp;#10;    circle.setAutoDraw(False)&amp;#10;    &amp;#10;# create some var's to get inside the excel file&amp;#10;numStim1 = len(circle_Stim_1_list)&amp;#10;sizeStim1 = circle_Stim_1_list_Size&amp;#10;posStim1 = circle_Stim_1_list_Pos&amp;#10;sumStim1 = sum(circle_Stim_1_list_Size)&amp;#10;&amp;#10;# add the var's inside excel file&amp;#10;thisExp.addData('numStim01', numStim1)&amp;#10;thisExp.addData('sizeStim01', sizeStim1)&amp;#10;thisExp.addData('posStim01', posStim1)&amp;#10;thisExp.addData('sumStim01', sumStim1)&amp;#10;&amp;#10;# vars for stim1 pic&amp;#10;Stim1_Pic_List.append(1)&amp;#10;Stim1_Pic_Num = len(Stim1_Pic_List)&amp;#10;Stim1_Pic_Num_Text = 'Stim1_Pic_Num_{}.png'.format(Stim1_Pic_Num)&amp;#10;&amp;#10;# get a pic&amp;#10;win.getMovieFrame()&amp;#10;win.saveMovieFrames(Stim1_Pic_Num_Text)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Stim2">
      <PolygonComponent name="Background_Circle_Stim_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="100" valType="int" updates="constant" name="nVertices"/>
        <Param val="Background_Circle_Stim_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.9, 0.9)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.4" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# list for cerating a pics at the end of the experiment&amp;#10;Stim2_Pic_List = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="Stim2_Pic_List = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="circle_Stim_2_list = [];&amp;#10;circle_Stim_2_list_Size = [];&amp;#10;circle_Stim_2_list_Pos = [];&amp;#10;nStim2 = randint(5, 11);&amp;#10;while ((circle_Stim_2_list.length &lt; nStim2)) {&amp;#10;    sizerand = ((random() * 0.1) + 0.05);&amp;#10;    pos_randX = ((random() * 0.9) - 0.45);&amp;#10;    pos_randY = ((random() * 0.9) - 0.45);&amp;#10;    polygon = new visual.Polygon({&quot;win&quot;: win, &quot;name&quot;: &quot;polygon&quot;, &quot;edges&quot;: 100, &quot;size&quot;: [sizerand, sizerand], &quot;ori&quot;: 0.0, &quot;pos&quot;: [((random() * 0.9) - 0.45), ((random() * 0.9) - 0.45)], &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;black&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 1.0), &quot;interpolate&quot;: true});&amp;#10;    overlap = false;&amp;#10;    overlap_2 = false;&amp;#10;    for (var circle, _pj_c = 0, _pj_a = circle_Stim_1_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        circle = _pj_a[_pj_c];&amp;#10;        if (circle.overlaps(polygon)) {&amp;#10;            overlap = true;&amp;#10;        }&amp;#10;    }&amp;#10;    for (var circle, _pj_c = 0, _pj_a = circle_Stim_2_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        circle = _pj_a[_pj_c];&amp;#10;        if (circle.overlaps(polygon)) {&amp;#10;            overlap_2 = true;&amp;#10;        }&amp;#10;    }&amp;#10;    isInside = insideCircle(Background_Circle_Stim_2, polygon);&amp;#10;    if ((((! overlap) &amp;&amp; (! overlap_2)) &amp;&amp; isInside)) {&amp;#10;        circle_Stim_2_list.append(polygon);&amp;#10;        circle_Stim_2_list_Size.append(polygon.size[0]);&amp;#10;        circle_Stim_2_list_Pos.append(polygon.pos);&amp;#10;    }&amp;#10;}&amp;#10;if ((circle_Stim_2_list.length === nStim2)) {&amp;#10;    for (var circle, _pj_c = 0, _pj_a = circle_Stim_2_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        circle = _pj_a[_pj_c];&amp;#10;        circle.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Creating a lists for the stim2 circles&amp;#10;circle_Stim_2_list = []&amp;#10;circle_Stim_2_list_Size = []&amp;#10;circle_Stim_2_list_Pos = []&amp;#10;&amp;#10;#create a random number of between 5 to 11 circles in one round&amp;#10;nStim2 = randint(5, 11)&amp;#10;&amp;#10;# as long as the circle list is not full with 'nStim2' circles it append circles&amp;#10;while len(circle_Stim_2_list) &lt; nStim2:&amp;#10;    #sizerand is a random number for the size of the circle&amp;#10;    sizerand = random()*0.1+0.05&amp;#10;    &amp;#10;    #pos_rand(X, Y) is a random number for the postion of the circle&amp;#10;    pos_randX = random()*0.9-0.45&amp;#10;    pos_randY = random()*0.9-0.45&amp;#10;    &amp;#10;    &amp;#10;    polygon = visual.Polygon(&amp;#10;              win=win, name='polygon',&amp;#10;              edges=100, size=(sizerand, sizerand),&amp;#10;              ori=0.0, pos=(random()*0.9-0.45, random()*0.9-0.45),&amp;#10;              lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='black',&amp;#10;              opacity=None, depth=-1.0, interpolate=True)&amp;#10;    &amp;#10;    # we using two overlap methods becouse we checking every circle with two lists - circle_Stim_2_list and circle_Stim_1_list&amp;#10;    overlap = False&amp;#10;    overlap_2 = False&amp;#10;    for circle in circle_Stim_1_list:&amp;#10;        if circle.overlaps(polygon):&amp;#10;           overlap = True&amp;#10;    for circle in circle_Stim_2_list:&amp;#10;        if circle.overlaps(polygon):&amp;#10;           overlap_2 = True        &amp;#10;    # the is inside method for all circles get inside the background circle&amp;#10;    isInside = insideCircle(Background_Circle_Stim_2, polygon)&amp;#10;    if not overlap and not overlap_2 and isInside:&amp;#10;      # append data for analsys and operations&amp;#10;      circle_Stim_2_list.append(polygon)&amp;#10;      circle_Stim_2_list_Size.append(polygon.size[0])&amp;#10;      circle_Stim_2_list_Pos.append(polygon.pos)&amp;#10;&amp;#10;# make the circles in 'circle_Stim_2_list' show up once just if the list is full with 'nStim2' circles&amp;#10;if len(circle_Stim_2_list) == nStim2:&amp;#10;    for circle in circle_Stim_2_list:&amp;#10;        circle.setAutoDraw(True)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#at the end of the routine make the circles in 'circle_Stim_2_list' disapeare&amp;#10;for circle in circle_Stim_2_list:&amp;#10;    circle.setAutoDraw(False)&amp;#10;    &amp;#10;# create some var's to get inside the excel file    &amp;#10;numStim2 = len(circle_Stim_2_list)&amp;#10;sizeStim2 = circle_Stim_2_list_Size&amp;#10;posStim2 = circle_Stim_2_list_Pos&amp;#10;sumStim2 = sum(circle_Stim_2_list_Size)&amp;#10;&amp;#10;# add the var's inside excel file&amp;#10;thisExp.addData('numStim02', numStim2)&amp;#10;thisExp.addData('sizeStim02', sizeStim2)&amp;#10;thisExp.addData('posStim02', posStim2)&amp;#10;thisExp.addData('sumStim02', sumStim2)&amp;#10;&amp;#10;# vars for stim1 pic&amp;#10;Stim2_Pic_List.append(1)&amp;#10;Stim2_Pic_Num = len(Stim2_Pic_List)&amp;#10;Stim2_Pic_Num_Text = 'Stim2_Pic_Num_{}.png'.format(Stim2_Pic_Num)&amp;#10;&amp;#10;# get a pic&amp;#10;win.getMovieFrame()&amp;#10;win.saveMovieFrames(Stim2_Pic_Num_Text)&amp;#10;&amp;#10;#clear all data from lists:&amp;#10;circle_Stim_1_list.clear()&amp;#10;circle_Stim_1_list_Size.clear()&amp;#10;circle_Stim_1_list_Pos.clear()&amp;#10;circle_Stim_2_list.clear()&amp;#10;circle_Stim_2_list_Size.clear()&amp;#10;circle_Stim_2_list_Pos.clear()&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="initalizing">
      <CodeComponent name="initializing_defs">
        <Param val="# custome overlaps def is checking if two circels are overlaps&amp;#10;# this def will run thruout the full experiment&amp;#10;def customOverlaps(a, b):&amp;#10;    ''' a custom function to detect overlap between circular objects&amp;#10;    Locally we can use psychopys inbuild overlaps method, this does not&amp;#10;    yet exist in psychoJS so we need a custom function for online use.&amp;#10;    &amp;#10;    input:&amp;#10;        a: a circular object with attributed pos and size&amp;#10;        b: a circular object with attributes pos and size'''&amp;#10;    pt1 = a.pos&amp;#10;    pt2 = b.pos&amp;#10;    &amp;#10;    sep = ((pt1[0]-pt2[0])**2+(pt1[1]-pt2[1])**2)**0.5&amp;#10;    &amp;#10;    # if the seperation is less than the sum of the radi&amp;#10;    if sep &lt; a.size[0]/2 + b.size[0]/2:&amp;#10;        return True&amp;#10;    else:&amp;#10;        return False&amp;#10;&amp;#10;# insideCircles def is checking if  circle is inside a bigger backgound circle&amp;#10;&amp;#10;def insideCircle(circle1, circle2):&amp;#10;    '''&amp;#10;    circle1: larger circle&amp;#10;    circle2: smaller circle&amp;#10;    &amp;#10;    return: boolean true or false if smaller circle inside larger&amp;#10;    '''&amp;#10;    x1 = circle1.pos[0]&amp;#10;    y1 = circle1.pos[1]&amp;#10;    r1 = circle1.size[0]/2&amp;#10;    x2 = circle2.pos[0]&amp;#10;    y2 = circle2.pos[1]&amp;#10;    r2 = circle2.size[0]/2&amp;#10;    &amp;#10;    distSq = (((x1 - x2)* (x1 - x2))+ ((y1 - y2)* (y1 - y2)))**(.5)&amp;#10;    isInside = False&amp;#10;    if (distSq + r2 == r1):&amp;#10;        x = 1&amp;#10;    elif (distSq + r2 &lt; r1):&amp;#10;        x = 2&amp;#10;        isInside = True&amp;#10;    else:&amp;#10;        x = 3&amp;#10;    return isInside" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="function customOverlaps(a, b) {&amp;#10;    /*a custom function to detect overlap between circular objects&amp;#10;    Locally we can use psychopys inbuild overlaps method, this does not&amp;#10;    yet exist in psychoJS so we need a custom function for online use.&amp;#10;&amp;#10;    input:&amp;#10;    a: a circular object with attributed pos and size&amp;#10;    b: a circular object with attributes pos and size*/&amp;#10;    var pt1, pt2, sep;&amp;#10;    pt1 = a.pos;&amp;#10;    pt2 = b.pos;&amp;#10;    sep = Math.pow((Math.pow((pt1[0] - pt2[0]), 2) + Math.pow((pt1[1] - pt2[1]), 2)), 0.5);&amp;#10;    if ((sep &lt; ((a.size[0] / 2) + (b.size[0] / 2)))) {&amp;#10;        return true;&amp;#10;    } else {&amp;#10;        return false;&amp;#10;    }&amp;#10;}&amp;#10;function insideCircle(circle1, circle2) {&amp;#10;    /*&amp;#10;    circle1: larger circle&amp;#10;    circle2: smaller circle&amp;#10;&amp;#10;    return: boolean true or false if smaller circle inside larger&amp;#10;    */&amp;#10;    var distSq, isInside, r1, r2, x, x1, x2, y1, y2;&amp;#10;    x1 = circle1.pos[0];&amp;#10;    y1 = circle1.pos[1];&amp;#10;    r1 = (circle1.size[0] / 2);&amp;#10;    x2 = circle2.pos[0];&amp;#10;    y2 = circle2.pos[1];&amp;#10;    r2 = (circle2.size[0] / 2);&amp;#10;    distSq = Math.pow((((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2))), 0.5);&amp;#10;    isInside = false;&amp;#10;    if (((distSq + r2) === r1)) {&amp;#10;        x = 1;&amp;#10;    } else {&amp;#10;        if (((distSq + r2) &lt; r1)) {&amp;#10;            x = 2;&amp;#10;            isInside = true;&amp;#10;        } else {&amp;#10;            x = 3;&amp;#10;        }&amp;#10;    }&amp;#10;    return isInside;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import math" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as math from 'math';&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initializing_defs" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Response">
      <PolygonComponent name="Base_Circle">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="hsv" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$(0.0000, 0.0000, 0.5000)" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$Bcolor" valType="color" updates="set every repeat" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="Base_Circle" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="Base_Circle_Pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="Base_Circle_Size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="100" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="response_key_resp">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#  list of number of rounds for pics name&amp;#10;response_Pic_Num_List = []&amp;#10;&amp;#10;# the background Circle 2r size and pos in cm:&amp;#10;Base_Circle_Size = 0.2564102564102564&amp;#10;Base_Circle_Pos = (0, 0)&amp;#10;Bcolor = (0.0000, 0.0000, 0.925)&amp;#10;&amp;#10;Sound_it = False&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="response_Pic_Num_List = [];&amp;#10;Base_Circle_Size = 0.2564102564102564;&amp;#10;Base_Circle_Pos = [0, 0];&amp;#10;Bcolor = [0.0, 0.0, 0.925];&amp;#10;Sound_it = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="kb = new keyboard.Keyboard();&amp;#10;Circle_List = [];&amp;#10;space_func = true;&amp;#10;Sound_it = false;&amp;#10;if ((sound_1 === PsychoJS.Status.FINISHED)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;Circle_Num = Number.parseInt(expInfo[&quot;Circle_Num&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# creating a keyboard&amp;#10;kb = keyboard.Keyboard()&amp;#10;&amp;#10;# creating some  lists for statistics and functions&amp;#10;Circle_List = []&amp;#10;&amp;#10;# space function is addition for the first part of the experiment&amp;#10;space_func = True&amp;#10;&amp;#10;Sound_it = False&amp;#10;&amp;#10;if sound_1 == FINISHED:&amp;#10;   continueRoutine = False&amp;#10;&amp;#10;Circle_Num = int(expInfo['Circle_Num'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# get the presses from keybaord and thier duration&amp;#10;keys = kb.getKeys(['space', 'return'], waitRelease = False, clear=False)&amp;#10;&amp;#10;# the size of the circle for handeling randomizationg in cm&amp;#10;Small_Circle_Size = 0.012820512820512822&amp;#10;#Small_Circle_Size = Small_Circle_Size*1.1-random()*Small_Circle_Size*0.2&amp;#10;&amp;#10;# the position of the circle for handeling randomization&amp;#10;Small_Circle_Pos_X = random()*Base_Circle_Size-Base_Circle_Size/2&amp;#10;Small_Circle_Pos_Y = random()*Base_Circle_Size-Base_Circle_Size/2&amp;#10;&amp;#10;# show the circle on screen&amp;#10;for circle in Circle_List:&amp;#10;    circle.setAutoDraw(True)&amp;#10;&amp;#10;# keyboard handeling&amp;#10;for thisKey in keys:&amp;#10;  if len(Circle_List) == Circle_Num:&amp;#10;    Sound_it = True&amp;#10;  if len(Circle_List) &lt; Circle_Num:&amp;#10;    if thisKey == 'space' and space_func:&amp;#10;        polygon = visual.Polygon(&amp;#10;                  win=win, name='polygon',units='height',&amp;#10;                  edges=100, size=(Small_Circle_Size),&amp;#10;                  ori=0.0, pos=(Small_Circle_Pos_X, Small_Circle_Pos_Y),&amp;#10;                  lineWidth = 0,     colorSpace='rgb',  lineColor='white', fillColor='black',&amp;#10;                  opacity=None, depth=0.0, interpolate=True)&amp;#10;        overlap = False          &amp;#10;        for circle in Circle_List:&amp;#10;            if customOverlaps(circle, polygon): &amp;#10;               overlap = True&amp;#10;        isInside = insideCircle(Base_Circle, polygon)       &amp;#10;        if not overlap and isInside:&amp;#10;           Circle_List.append(polygon)&amp;#10;        if thisKey.duration != None:&amp;#10;           space_func = False&amp;#10;           kb.getKeys(clear = True)&amp;#10;           keys.clear()&amp;#10;     &amp;#10;    elif thisKey == 'space' and not space_func: &amp;#10;        if len(Circle_List) &gt; 0:&amp;#10;           Cir_Pop = Circle_List.pop()&amp;#10;           Cir_Pop.setAutoDraw(False)&amp;#10;        if thisKey.duration != None:&amp;#10;           space_func = True&amp;#10;           kb.getKeys(clear = True)&amp;#10;           keys.clear()&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="keys = kb.getKeys([&quot;space&quot;, &quot;return&quot;], {&quot;waitRelease&quot;: false, &quot;clear&quot;: false});&amp;#10;Small_Circle_Size = 0.012820512820512822;&amp;#10;Small_Circle_Pos_X = ((Math.random() * Base_Circle_Size) - (Base_Circle_Size / 2));&amp;#10;Small_Circle_Pos_Y = ((Math.random() * Base_Circle_Size) - (Base_Circle_Size / 2));&amp;#10;for (var circle, _pj_c = 0, _pj_a = Circle_List, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    circle = _pj_a[_pj_c];&amp;#10;    circle.setAutoDraw(true);&amp;#10;}&amp;#10;for (var thisKey, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    thisKey = _pj_a[_pj_c];&amp;#10;    if ((Circle_List.length === Circle_Num)) {&amp;#10;        Sound_it = true;&amp;#10;    }&amp;#10;    if ((Circle_List.length &lt; Circle_Num)) {&amp;#10;        if (((thisKey === &quot;space&quot;) &amp;&amp; space_func)) {&amp;#10;            polygon = new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;polygon&quot;, &quot;units&quot;: &quot;height&quot;, &quot;edges&quot;: 100, &quot;size&quot;: Small_Circle_Size, &quot;ori&quot;: 0.0, &quot;pos&quot;: [Small_Circle_Pos_X, Small_Circle_Pos_Y], &quot;lineWidth&quot;: 0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;black&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: 0.0, &quot;interpolate&quot;: true});&amp;#10;            overlap = false;&amp;#10;            for (var circle, _pj_f = 0, _pj_d = Circle_List, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                circle = _pj_d[_pj_f];&amp;#10;                if (customOverlaps(circle, polygon)) {&amp;#10;                    overlap = true;&amp;#10;                }&amp;#10;            }&amp;#10;            isInside = insideCircle(Base_Circle, polygon);&amp;#10;            if (((! overlap) &amp;&amp; isInside)) {&amp;#10;                Circle_List.push(polygon);&amp;#10;            }&amp;#10;            if ((thisKey.duration !== null)) {&amp;#10;                space_func = false;&amp;#10;                kb.getKeys({&quot;clear&quot;: true});&amp;#10;                keys.clear();&amp;#10;            }&amp;#10;        } else {&amp;#10;            if (((thisKey === &quot;space&quot;) &amp;&amp; (! space_func))) {&amp;#10;                if ((Circle_List.length &gt; 0)) {&amp;#10;                    Cir_Pop = Circle_List.pop();&amp;#10;                    Cir_Pop.setAutoDraw(false);&amp;#10;                }&amp;#10;                if ((thisKey.duration !== null)) {&amp;#10;                    space_func = true;&amp;#10;                    kb.getKeys({&quot;clear&quot;: true});&amp;#10;                    keys.clear();&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# def number of rounds for pic&amp;#10;response_Pic_Num_List.append(1)&amp;#10;Pic_Num = len(response_Pic_Num_List)&amp;#10;Pic_Num_Text = '{}.png'.format(Pic_Num)&amp;#10;&amp;#10;#creating a pic&amp;#10;win.getMovieFrame()&amp;#10;win.saveMovieFrames(Pic_Num_Text)&amp;#10;&amp;#10;r2_size = []&amp;#10;Positions = []&amp;#10;sum_area = []&amp;#10;for i in Circle_List:&amp;#10;    r2_size.append(i.size[0])&amp;#10;    Positions.append((i.pos[0], i.pos[1]))&amp;#10;    sum_area.append(((i.size[0]*0.5)**2)*math.pi)&amp;#10;&amp;#10;#zip the datat to one list:&amp;#10;zipData = list(zip(r2_size, Positions))&amp;#10;&amp;#10;# adding important values to excle file&amp;#10;thisExp.addData('nCircle', len(Circle_List))&amp;#10;thisExp.addData('sum_area_Circle', sum(sum_area))&amp;#10;thisExp.addData('r2_Circle_Sizes', r2_size)&amp;#10;thisExp.addData('Circle_Pos', Positions)&amp;#10;thisExp.addData('zipData', zipData)&amp;#10;&amp;#10;&amp;#10;for Circle in Circle_List:&amp;#10;    Circle.setAutoDraw(False)&amp;#10;print(Base_Circle.size)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SoundComponent name="sound_1">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="sound_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="A" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="Sound_it == True" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="1" valType="num" updates="constant" name="volume"/>
      </SoundComponent>
      <PolygonComponent name="polygon_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="aqua" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="(1.2, 1.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1.25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="%" valType="str" updates="constant" name="text"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="initalizing"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="20" valType="num"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Response"/>
    <LoopTerminator name="trials_2"/>
  </Flow>
</PsychoPy2experiment>
