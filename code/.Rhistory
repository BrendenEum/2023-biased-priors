final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
# estimate and return the mode of a distribution (in this case, the posterior)
estimate_mode <- function(x) {
d <- density(x)
return( d$x[which.max(d$y)] )
}
# estimate 95 HDI
estimate_hdi <- function(x, conf=.95) {
lb <- 0 + (1-conf)/2
ub <- 1 - (1-conf)/2
d <- quantile(x, probs = c(lb,ub), na.rm = F,
names = TRUE)
return(d)
}
linesize = 2
markersize = .1
ribbonalpha = 0.33
jitter_amt = 0.075
textsize <- 18
legtxtsize <- 18
plot_margins <- 1
legend_location <- "none"
col_title_size = 22
col_title_face = 'bold'
back_fill_e = 'lightcyan1'
back_fill_c = 'mistyrose1'
back_fill_j = 'lightcyan2'
plot_width = 8
plot_height = 8
final_plot_units = c('in')
colors <- c(
"1" = "#00BFC4", #blue
"0" = "#F8766D"  #red
)
colors_correct <- c(
"1" = "darkgreen",  #correct
"0" = "darkred"  #incorrect
)
ggplot <- function(...) ggplot2::ggplot(...) +
theme_bw() +
#plot options
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
text=element_text(size=textsize),
plot.margin=unit(c(plot_margins,plot_margins,plot_margins,plot_margins),"cm")
) +
#legend options
theme(
legend.title = element_blank(),
legend.position = legend_location,
legend.justification = c(0, 1),
legend.text = element_text(size = legtxtsize),
legend.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors)
data.main <- read.csv(file.path(datadir, "data.main.csv"))
rm(list = ls())
seed = 1337
library(dplyr) #pipeline %>%
library(plotrix) #std.error
library(ggplot2) #plots... duh
library(grid) #combine plots
library(gridExtra) #more combining plots
library(ggsci) #I like the Futurama color palette <3
library(latex2exp) #for fancy math stuffs in the plots
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../biased-priors-manuscript/figures"
final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
# estimate and return the mode of a distribution (in this case, the posterior)
estimate_mode <- function(x) {
d <- density(x)
return( d$x[which.max(d$y)] )
}
# estimate 95 HDI
estimate_hdi <- function(x, conf=.95) {
lb <- 0 + (1-conf)/2
ub <- 1 - (1-conf)/2
d <- quantile(x, probs = c(lb,ub), na.rm = F,
names = TRUE)
return(d)
}
linesize = 2
markersize = .1
ribbonalpha = 0.33
jitter_amt = 0.075
textsize <- 18
legtxtsize <- 18
plot_margins <- 1
legend_location <- "none"
col_title_size = 22
col_title_face = 'bold'
back_fill_e = 'lightcyan1'
back_fill_c = 'mistyrose1'
back_fill_j = 'lightcyan2'
plot_width = 8
plot_height = 8
final_plot_units = c('in')
colors <- c(
"1" = "#00BFC4", #blue
"0" = "#F8766D"  #red
)
colors_correct <- c(
"1" = "darkgreen",  #correct
"0" = "darkred"  #incorrect
)
ggplot <- function(...) ggplot2::ggplot(...) +
theme_bw() +
#plot options
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
text=element_text(size=textsize),
plot.margin=unit(c(plot_margins,plot_margins,plot_margins,plot_margins),"cm")
) +
#legend options
theme(
legend.title = element_blank(),
legend.position = legend_location,
legend.justification = c(0, 1),
legend.text = element_text(size = legtxtsize),
legend.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors)
data.main <- read.csv(file.path(datadir, "data.main.csv"))
pdata.SanityCheckAcc <- data.main[data.main$sanity==1, ] %>%
group_by(subject) %>%
summarize(
accuracy.sub = mean(correct)
)
p.SanityCheckAcc <- ggplot(data=pdata.SanityCheckAcc, aes(x=accuracy.sub)) +
annotate(
"rect",
xmin = .85, xmax = .9,
ymin = 0, ymax = 15,
alpha = .1, fill = "darkred") +
geom_vline(
xintercept = 0.90,
linetype = "dashed",
color = "darkred",
alpha = .7,
size = linesize
) +
geom_density(
color = "grey30",
fill = "grey50",
size = linesize
) +
coord_cartesian(expand=F) +
xlim(c(0,1)) +
ylim(c(0,NA)) +
labs(
x = "Accuracy",
y = "Density"
)
plot(p.SanityCheckAcc)
ggsave(
file.path(figdir, "p.SanityCheckAcc.pdf"),
plot = p.SanityCheckAcc
)
ggsave(
file.path(final.figdir, "p.SanityCheckAcc.pdf"),
plot = p.SanityCheckAcc
)
pdata.SanityCheckAcc <- data.main[data.main$sanity==1, ] %>%
group_by(subject) %>%
summarize(
accuracy.sub = mean(correct)
)
p.SanityCheckAcc <- ggplot(data=pdata.SanityCheckAcc, aes(x=accuracy.sub)) +
annotate(
"rect",
xmin = .85, xmax = .9,
ymin = 0, ymax = 15,
alpha = .1, fill = "darkred") +
geom_vline(
xintercept = 0.90,
linetype = "dashed",
color = "darkred",
alpha = .7,
size = linesize
) +
geom_density(
color = "grey30",
fill = "grey50",
size = linesize
) +
coord_cartesian(expand=F) +
xlim(c(.85,1)) +
ylim(c(0,NA)) +
labs(
x = "Accuracy",
y = "Density"
)
plot(p.SanityCheckAcc)
ggsave(
file.path(figdir, "p.SanityCheckAcc.pdf"),
plot = p.SanityCheckAcc
)
ggsave(
file.path(final.figdir, "p.SanityCheckAcc.pdf"),
plot = p.SanityCheckAcc
)
rm(list = ls())
seed = 1337
library(dplyr)      # pipeline %>%
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../biased-priors-manuscript/figures"
final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
variables_of_interest <- c(
"Participant.Status", #       Make sure subjects completed the experiment
"Participant.Private.ID", #   Unidentifiable subject ID number
"trial", #                    Randomized numbering of trials (you'll need to overwrite this later)
"block", #                    Randomized numbering of blocks
"display", #                  Display name from Gorilla
"Screen.Name", #              Screen name from Gorilla
"Response", #                 Subject's response
"Reaction.Time", #            Reaction time in ms
"duration", #                 How long was the stimulus displayed for? (ms)
"Correct", #                  Did subject's response match the correct answer (1=Y, 0=N)
"ANSWER", #                   What was the correct answer?
"stimulus", #                 Which stimulus was used? ("blue" or "red", followed by an ID number for the randomly generated stimulus)
"sanity", #                   Was this a sanity check trial? (i.e. a trial where the outcome is easy to determine, say 80% red)
"bias"  #                     What color is favored this block? (i.e. 60% of trials favor red)
)
data.raw <- read.csv(
file = file.path(rawdatadir, "pilot_2_v10.csv")
)
data.main <- data.raw[data.raw$Participant.Status=="complete", variables_of_interest]
# Rename certain columns.
data.main <- data.main %>%
rename(
subject = "Participant.Private.ID",
screen = "Screen.Name",
response = "Response",
rt = "Reaction.Time",
stimDur = "duration",
correct = "Correct",
correctResponse = "ANSWER",
sanity = "sanity",
bias = "bias"
)
# Factorize subject number.
data.main$subject <- data.main$subject %>%
factor() %>%
as.numeric() %>%
factor()
# Create a mapping from subject, trial to stimulus duration.
rawStimDur <- data.main[data.main$display == "Trial" & data.main$screen == "Stimulus", c("subject", "trial", "rt")]
rawStimDur <- rawStimDur %>% rename(stimDur.raw = "rt")
# Prune data.main down to just the response screens.
data.main <- data.main[data.main$display == "Trial" & data.main$screen == "Response",]
# Add new trial numbers and blocks to data.main.
data.main <- data.main %>%
group_by(subject) %>%
mutate(
trial = row_number()
)
data.main[data.main$trial <= 100, "block"] <- 1
data.main[data.main$trial > 100 & data.main$trial <= 200, "block"] <- 2
data.main[data.main$trial > 200 & data.main$trial <= 300, "block"] <- 3
data.main[data.main$trial > 300 & data.main$trial <= 400, "block"] <- 4
# Round rt to nearest 1 ms.
data.main$rt <- data.main$rt %>% as.numeric() %>% round()
# Add raw stimulus durations for comparison... but will probably end up using "duration" variable since it's already rounded.
data.main$simDur.raw <- rawStimDur$stimDur.raw
# Change response and correctResponse to numeric (1 = Left, 0 = Right).
data.main$response <- ifelse(data.main$response=="left", 1, 0)
data.main$correctResponse <- ifelse(data.main$correctResponse=="left", 1, 0)
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
data.main <- data.main[data.main$Participant.Status=="complete", ]
data.main <- select(data.main,-"Participant.Status")
# Drop if <90% accuracy in sanity checks.
QC <- data.main[data.main$sanity==1,] %>%
group_by(subject) %>%
summarize(
accuracy = mean(correct)
)
dropped.QC <- unique(QC[QC$accuracy<.9, "subject"])
for (sub in dropped.QC$subject) {
data.main <- data.main[data.main$subject != sub,]
}
View(QC)
View(data.main)
data.main$subject %>% unique() %>% length()
View(QC)
View(dropped.QC)
num_passedQC <- dropped.QC$subject %>% unique() %>% length()
num_passedQC <- data.main$subject %>% unique() %>% length()
num_failedQC <- dropped.QC$subject %>% unique() %>% length()
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
rm(list = ls())
seed = 1337
library(dplyr)      # pipeline %>%
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../biased-priors-manuscript/figures"
final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
variables_of_interest <- c(
"Participant.Status", #       Make sure subjects completed the experiment
"Participant.Private.ID", #   Unidentifiable subject ID number
"trial", #                    Randomized numbering of trials (you'll need to overwrite this later)
"block", #                    Randomized numbering of blocks
"display", #                  Display name from Gorilla
"Screen.Name", #              Screen name from Gorilla
"Response", #                 Subject's response
"Reaction.Time", #            Reaction time in ms
"duration", #                 How long was the stimulus displayed for? (ms)
"Correct", #                  Did subject's response match the correct answer (1=Y, 0=N)
"ANSWER", #                   What was the correct answer?
"stimulus", #                 Which stimulus was used? ("blue" or "red", followed by an ID number for the randomly generated stimulus)
"sanity", #                   Was this a sanity check trial? (i.e. a trial where the outcome is easy to determine, say 80% red)
"bias"  #                     What color is favored this block? (i.e. 60% of trials favor red)
)
data.raw <- read.csv(
file = file.path(rawdatadir, "pilot_2_v10.csv")
)
data.main <- data.raw[data.raw$Participant.Status=="complete", variables_of_interest]
# Rename certain columns.
data.main <- data.main %>%
rename(
subject = "Participant.Private.ID",
screen = "Screen.Name",
response = "Response",
rt = "Reaction.Time",
stimDur = "duration",
correct = "Correct",
correctResponse = "ANSWER",
sanity = "sanity",
bias = "bias"
)
# Factorize subject number.
data.main$subject <- data.main$subject %>%
factor() %>%
as.numeric() %>%
factor()
# Create a mapping from subject, trial to stimulus duration.
rawStimDur <- data.main[data.main$display == "Trial" & data.main$screen == "Stimulus", c("subject", "trial", "rt")]
rawStimDur <- rawStimDur %>% rename(stimDur.raw = "rt")
# Prune data.main down to just the response screens.
data.main <- data.main[data.main$display == "Trial" & data.main$screen == "Response",]
# Add new trial numbers and blocks to data.main.
data.main <- data.main %>%
group_by(subject) %>%
mutate(
trial = row_number()
)
data.main[data.main$trial <= 100, "block"] <- 1
data.main[data.main$trial > 100 & data.main$trial <= 200, "block"] <- 2
data.main[data.main$trial > 200 & data.main$trial <= 300, "block"] <- 3
data.main[data.main$trial > 300 & data.main$trial <= 400, "block"] <- 4
# Round rt to nearest 1 ms.
data.main$rt <- data.main$rt %>% as.numeric() %>% round()
# Add raw stimulus durations for comparison... but will probably end up using "duration" variable since it's already rounded.
data.main$simDur.raw <- rawStimDur$stimDur.raw
# Change response and correctResponse to numeric (1 = Left, 0 = Right).
data.main$response <- ifelse(data.main$response=="left", 1, 0)
data.main$correctResponse <- ifelse(data.main$correctResponse=="left", 1, 0)
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
data.main <- data.main[data.main$Participant.Status=="complete", ]
data.main <- select(data.main,-"Participant.Status")
# Drop if <90% accuracy in sanity checks.
QC <- data.main[data.main$sanity==1,] %>%
group_by(subject) %>%
summarize(
accuracy = mean(correct)
)
dropped.QC <- unique(QC[QC$accuracy<.9, "subject"])
for (sub in dropped.QC$subject) {
data.main <- data.main[data.main$subject != sub,]
}
# Store the results to text files.
num_passedQC <- data.main$subject %>% unique() %>% length()
num_failedQC <- dropped.QC$subject %>% unique() %>% length()
num_totalSub <- num_passedQC + num_failedQC
writeLines(
num_passedQC,
file.path(final.txtdir, "n_passedQC.txt")
)
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
rm(list = ls())
seed = 1337
library(dplyr)      # pipeline %>%
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../biased-priors-manuscript/figures"
final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
variables_of_interest <- c(
"Participant.Status", #       Make sure subjects completed the experiment
"Participant.Private.ID", #   Unidentifiable subject ID number
"trial", #                    Randomized numbering of trials (you'll need to overwrite this later)
"block", #                    Randomized numbering of blocks
"display", #                  Display name from Gorilla
"Screen.Name", #              Screen name from Gorilla
"Response", #                 Subject's response
"Reaction.Time", #            Reaction time in ms
"duration", #                 How long was the stimulus displayed for? (ms)
"Correct", #                  Did subject's response match the correct answer (1=Y, 0=N)
"ANSWER", #                   What was the correct answer?
"stimulus", #                 Which stimulus was used? ("blue" or "red", followed by an ID number for the randomly generated stimulus)
"sanity", #                   Was this a sanity check trial? (i.e. a trial where the outcome is easy to determine, say 80% red)
"bias"  #                     What color is favored this block? (i.e. 60% of trials favor red)
)
data.raw <- read.csv(
file = file.path(rawdatadir, "pilot_2_v10.csv")
)
data.main <- data.raw[data.raw$Participant.Status=="complete", variables_of_interest]
# Rename certain columns.
data.main <- data.main %>%
rename(
subject = "Participant.Private.ID",
screen = "Screen.Name",
response = "Response",
rt = "Reaction.Time",
stimDur = "duration",
correct = "Correct",
correctResponse = "ANSWER",
sanity = "sanity",
bias = "bias"
)
# Factorize subject number.
data.main$subject <- data.main$subject %>%
factor() %>%
as.numeric() %>%
factor()
# Create a mapping from subject, trial to stimulus duration.
rawStimDur <- data.main[data.main$display == "Trial" & data.main$screen == "Stimulus", c("subject", "trial", "rt")]
rawStimDur <- rawStimDur %>% rename(stimDur.raw = "rt")
# Prune data.main down to just the response screens.
data.main <- data.main[data.main$display == "Trial" & data.main$screen == "Response",]
# Add new trial numbers and blocks to data.main.
data.main <- data.main %>%
group_by(subject) %>%
mutate(
trial = row_number()
)
data.main[data.main$trial <= 100, "block"] <- 1
data.main[data.main$trial > 100 & data.main$trial <= 200, "block"] <- 2
data.main[data.main$trial > 200 & data.main$trial <= 300, "block"] <- 3
data.main[data.main$trial > 300 & data.main$trial <= 400, "block"] <- 4
# Round rt to nearest 1 ms.
data.main$rt <- data.main$rt %>% as.numeric() %>% round()
# Add raw stimulus durations for comparison... but will probably end up using "duration" variable since it's already rounded.
data.main$simDur.raw <- rawStimDur$stimDur.raw
# Change response and correctResponse to numeric (1 = Left, 0 = Right).
data.main$response <- ifelse(data.main$response=="left", 1, 0)
data.main$correctResponse <- ifelse(data.main$correctResponse=="left", 1, 0)
# Check if status == complete. Then drop the variable after.
dropped.statusIncomplete <- unique(data.main[data.main$Participant.Status!="complete", "subject"])
data.main <- data.main[data.main$Participant.Status=="complete", ]
data.main <- select(data.main,-"Participant.Status")
# Drop if <90% accuracy in sanity checks.
QC <- data.main[data.main$sanity==1,] %>%
group_by(subject) %>%
summarize(
accuracy = mean(correct)
)
dropped.QC <- unique(QC[QC$accuracy<.9, "subject"])
for (sub in dropped.QC$subject) {
data.main <- data.main[data.main$subject != sub,]
}
# Store the results to text files.
num_passedQC <- data.main$subject %>% unique() %>% length()
num_failedQC <- dropped.QC$subject %>% unique() %>% length()
num_totalSub <- num_passedQC + num_failedQC
writeLines(
toString(num_passedQC),
file.path(final.txtdir, "n_passedQC.txt")
)
writeLines(
toString(num_failedQC),
file.path(final.txtdir, "n_failedQC.txt")
)
writeLines(
toString(num_totalSub),
file.path(final.txtdir, "n_subjectsPreQC.txt")
)
write.csv(
data.main,
file.path(datadir, "data.main.csv")
)
